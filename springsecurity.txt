1-1 导学
2-1 开发环境安装（视频中有详细讲解）
	JDK
	STS
	Mysql
2-2 代码结构
	1、
	imooc-security:主模块
	imooc-security-core:核心业务逻辑
	imooc-security-browser:浏览器安全特定代码
	imooc-security-app:app相关特定代码
	imooc-security-demo:样例程序
	2、
	新建maven项目，勾选create a simple project，选择pom，1.0.0-SHAPSHOT
	其余四个项目就基于第一个，然后选择jar，1.0.0-SHAPSHOT
	3、
	在父项目pom中添加依赖管理，这里其实是使用了spring-io的依赖管理，可以在官网查看到，里面的依赖管理也是从官网copy的，使用这个的目的是如果你引用spring，hibernate等，可以不用自己写版本号，spring-io会帮助你选择合适的版本。
	还添加spring-cloud的依赖，
	添加编译环境1.8
	引入子模块，这时候其他4个子模块会报错是因为指定1.8，其他几个是1.5版本，这时候更新一下其他几个子模块即可
	4、
	core的pom文件
	browser的pom文件
	app的pom文件
	demo的pom文件
	5、idea创建项目
	https://www.cnblogs.com/wangmingshun/p/6383576.html
2-3 Hello Spring Security
	1、
		在demo项目中写springboot启动类DemoApplicaiton将其定为RestController
		启动项目会报错
		Description:
		Cannot determine embedded database driver class for database type NONE
		这是因为依赖了spring-boot-jdbc但没有配置
		在applicaiton.properties里配置数据库连接信息
	2、
		再次启动
		报错Error creating bean with name 'org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$SessionRepositoryValidator': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: No Spring Session store is configured: set the 'spring.session.store-type' property
		这是因为在browser里面配置了一个session依赖，先关掉spring.session.store-type=none
	3、
		再次启动
		启动成功，访问localhost：8080，弹出安全认证，这是springsecurity的默认认证
		关闭security.basic.enabled=false
	4、
		程序如何打包发布，在父项目中执行命令maven build...
		clean package
		这样每个项目的target文件夹下就有一个自己的jar包，但是这样是不行的
		demo项目应该是一个web项目，所以需要在demo的pom文件中加入插件，这样在demo文件夹会多一个jar包，这是一个可执行的jar
		可以用java -jar 这个jar包执行，就相当于启动main函数

3-1使用Spring Mvc开发RestFul API
	1、RestfulApi
		（1）用URL描述资源
		（2）使用HTTP方法描述行为，使用HTTP状态码来表示不同的结果
			GRT查
			POST增
			PUT改
			DELETE删
		（3）使用json交互数据
		（4）只是一种风格，并不是强制的标准
	2、REST成熟度模型
		（1）使用HTTP作为传输方式
		（2）引入资源概念，每个资源都有对应的URL
		（3）使用HTTP方法进行不同的的操作，使用HTTP状态吗来表示不同的结果
		（4）使用超媒体，在资源的表达中包含了链接信息
3-2查询请求
    1、编写针对RestfulAPI的测试用例
        编写对RestfulAPI的测试用例 依赖：后期引入测试用例
        	UserControllerTest类whenQuerySuccess方法
        	看上面对测试用例的的注解
        	在sts中添加偏好Favorite，静态导入
    2、使用注解声明RestfulAPI
    3、在RestfulAPI中传递参数
        @RestController标明此Controller提供restAPI
        @RequestMapping及其变体。映射HTTP请求：value = "/user",method = RequestMethod.GET
        @RequestParam映射请求参数：required = false,name = "username",value = "username",defaultValue = "zhhangsan"
        Pageable类分页对象，是springdata的对象如果用spring-data可以用这个非常方便，可以使用@PageableDefault默认值
        JSONPATH写法：在GitHub上面找

        400错误，表示没有请求

        System.out.println(ReflectionToStringBuilder.toString(userQueryCondition, ToStringStyle.MULTI_LINE_STYLE));

3-3用户详情服务
    1、@PathVariable映射url片段到java方法的参数
    2、在url声明中使用正则表达式
    3、@JsonView控制json输出内容

    编写用户详情服务whenGetInfoSuccess方法
    @PahtVariable：url中的片段作为值，参数中的正则表达式
    post方法的时候请求的时候需要多一个content
    使用正则表达式whenGetInfoFail方法
    @JsonView控制返回json的内容
    	使用接口来声明多个视图：在User类，用户详细视图可以继承简单视图
    	在值对象的get方法指定视图
    	在controller上指定视图
    .andReturn().getResponse().getContentAsString()测试用例中返回json字符串

 3-4处理创建请求
    1、@RequestBody映射请求到java方法的参数
    2、日期类型参数的处理
    3、@Valid注解和BindingResult验证请求参数的合法性并处理校验结果

    @RquestBody：请求中请求体
    whenCreateSuccess() 方法
    405请求method后台不支持，比如后台是get，而发是post
    日期类型参数的处理：不要传带格式的，传时间戳，由前台确定展示格式
    @Valid和BindingResult
    	在类中添加了notblank之后，需要在controller加valied注解
    	当有valid注解而没有BindingResult类在Controller时候，有错误的话，程序会返回404
    	当有BindingResult类的时候，程序会执行

3-5开发用户信息修改和删除服务
    1、常用的验证注解
    2、自定义消息
    3、自定义校验注解

    hibernate validator：所有注解都可以加message字段
    	whenUpdateSuccess()方法LocalDateTime1.8新加的类
    自己写注解验证
    	MyConstraint类
    		@Target({ElementType.METHOD,ElementType.FIELD})
    		@Retention(RetentionPolicy.RUNTIME)
    		@Constraint(validatedBy = MyConstraintValidator.class)

3-6 RESTful API错误处理
    1、SpringBoot默认的错误处理机制
    2、自定义异常处理

    SpringBoot默认错误处理机制（用的getInfo（）方法）：
	BasicErrorController 根据请求头作出判断：（这里看出同一个url有不同的处理）
	请求头里面有text/html，会进入public ModelAndView errorHtml方法
	没有的时候，会进入public ResponseEntity<Map<String, Object>> error方法
	当是浏览器访问时候，返回html，其它情况情况返回json（这种情况会是直接就没有进到方法里，在传入参数那里就直接返回错误了）
	springboot默认的错误处理返回的json的message是后端抛出异常的message

    自定义错误处理
	springboot自定义错误处理是基于状态码来处理的，
	在resources/resources/error文件夹中写状态码.html，这种只对浏览器访问有效，其他平台访问还是返回的json字符串

	新建exception包，新建类，自定义异常类，在controller类中抛出自定义异常类，但是springboot返回的json也只会返回message字段，
	如果想返回其他信息：新建类ControllerExceptionHandler类
	@ControllerAdvice注解表示这个类是用来处理Controller类抛出的异常的，本身不处理请求
	方法handleUserNotExistException（）上面可以添加注解

3-7使用切片拦截Rest服务
    1、过滤器拦截
    2、拦截器拦截
    3、切片拦截

    需求：记录所有服务的处理时间

    过滤器：是javaee的规范，它不知道controller之类的东西
        TimeFilter：实现Filter接口，然后@Component让过滤器起作用
        但是如果是第三方的过滤器，它没有使用@Component注解，那么我们怎么让他起作用呢？
        传统的web项目中是web.xml添加过滤器，但是SpringBoot是没有配置文件的
        现在吧TimeFilter当成第三方，新建WebConfig类，注解@Configuration,然后在里面注入bean

    Spring注入Bean：（1）添加@Component之类的注解，spring会扫描这些注解
                    （2）配置类，注入@Bean

    拦截器：
        TimeInterceptor implements HandlerInterceptor：
        //控制器处理之前调用：preHandle
        //控制器处理之后调用，如果controller层抛出异常，这个方法不会调用：postHandle
        //不管controller是正常运行，还是抛出异常，这个方法都会正常调用afterCompletion
        拦截器必须加@Component注解，还不够，还需要再WebConfig配置才可以，这时候
        WebCOnfig必须继承extends WebMvcConfigurerAdapter类，重写addInterceptors方法
        拦截器的finish方法当有异常发生的时候，异常还是返回空，是因为
                ControllerExceptionHandler已经把异常处理掉了
                当没有处理某类异常，会看到拦截器运行了两次
                第一次拦截的是UserController
                第二次拦截的是BasicErrorController
                拦截器会拦截所有的Controler，不管是不是自己写的

    切片：实际就是一个类
            切入点（注解：在哪些方法起作用，在什么时候起作用），增强（方法：起作用时执行的业务逻辑）
            要添加依赖，spring-boot-starter-aop
        	新建包aspect，新建类TimeAdpect，添加@Aspect@Component

    过滤器：原始http请求响应，拿不到具体处理的方法信息,不知道哪个controller处理的哪个方法处理的
    拦截器：上面两个都能拿到，但是拿不到方法真正被调用的时候传进来的参数的值（看sprig源码，DispatcherServlet——doservice方法——dodispatch方法962-971行，）
    切片：能拿到方法的参数的值，但是拿不到原始http请求响应
    执行顺序
    过滤器——拦截器——aspect—controller
    当controller层方法有异常：反方向并且多一个：过滤器——拦截器——aspect————ControllerAdvice——controller

3-9文件上传和下载

    whenUploadSuccess模拟前端文件上传
    FileController提供下载上传两种方法
    JDK1.7以后，try（）里面的东西可以jdk帮你关，不用写finally代码了
    添加commons-io包